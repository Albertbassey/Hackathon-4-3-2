import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { LessonPlan } from '@/lib/types';
import { Copy, Mail, Save, Download, Clock, BookOpen, Target, Users, HelpCircle, Home } from 'lucide-react';
import { emailLessonPlan, saveLessonPlan } from '@/lib/api';
import { toast } from 'sonner';

interface LessonPlanDisplayProps {
  lessonPlan: LessonPlan;
  userEmail?: string;
  onNewPlan: () => void;
}

export default function LessonPlanDisplay({ lessonPlan, userEmail, onNewPlan }: LessonPlanDisplayProps) {
  const [isEmailing, setIsEmailing] = useState(false);

  const copyToClipboard = async () => {
    const content = formatLessonPlanText(lessonPlan);
    try {
      await navigator.clipboard.writeText(content);
      toast.success('Lesson plan copied to clipboard!');
    } catch (error) {
      toast.error('Failed to copy to clipboard');
    }
  };

  const handleEmail = async () => {
    if (!userEmail) {
      toast.error('Please sign in to email lesson plans');
      return;
    }

    setIsEmailing(true);
    try {
      const result = await emailLessonPlan(userEmail, lessonPlan);
      if (result.success) {
        toast.success('Lesson plan emailed successfully!');
      } else {
        toast.error(result.error || 'Failed to send email');
      }
    } catch (error) {
      toast.error('Failed to send email');
    }
    setIsEmailing(false);
  };

  const handleSave = () => {
    try {
      saveLessonPlan(lessonPlan);
      toast.success('Lesson plan saved successfully!');
    } catch (error) {
      toast.error('Failed to save lesson plan');
    }
  };

  const formatLessonPlanText = (plan: LessonPlan): string => {
    return `
LESSON PLAN
===========

Subject: ${plan.input.subject}
Grade Level: ${plan.input.gradeLevel}
Topic: ${plan.input.topic}
Duration: ${plan.input.duration} minutes
${plan.input.learningObjective ? `Learning Objective: ${plan.input.learningObjective}` : ''}

LESSON OBJECTIVES:
${plan.content.objectives.map((obj, i) => `${i + 1}. ${obj}`).join('\n')}

WARM-UP ACTIVITY:
${plan.content.warmUp}

CORE CONTENT:
${plan.content.coreContent.map((content, i) => `${i + 1}. ${content}`).join('\n')}

STUDENT ACTIVITIES:
${plan.content.studentActivities.map((activity, i) => `${i + 1}. ${activity}`).join('\n')}

ASSESSMENT QUESTIONS:
${plan.content.assessmentQuestions.map((question, i) => `${i + 1}. ${question}`).join('\n')}

HOMEWORK TASKS:
${plan.content.homeworkTasks.map((task, i) => `${i + 1}. ${task}`).join('\n')}

Generated by LessonCraft AI on ${new Date(plan.createdAt).toLocaleDateString()}
    `.trim();
  };

  return (
    <div className="w-full max-w-4xl mx-auto space-y-6">
      {/* Header */}
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <div>
              <CardTitle className="text-2xl text-gray-900">
                {lessonPlan.input.topic}
              </CardTitle>
              <CardDescription className="text-lg">
                {lessonPlan.input.subject} â€¢ {lessonPlan.input.gradeLevel}
              </CardDescription>
            </div>
            <Badge variant="secondary" className="flex items-center space-x-1">
              <Clock className="w-3 h-3" />
              <span>{lessonPlan.input.duration} min</span>
            </Badge>
          </div>
        </CardHeader>
      </Card>

      {/* Action Buttons */}
      <div className="flex flex-wrap gap-2">
        <Button onClick={copyToClipboard} variant="outline" size="sm">
          <Copy className="w-4 h-4 mr-2" />
          Copy
        </Button>
        <Button onClick={handleEmail} variant="outline" size="sm" disabled={isEmailing}>
          <Mail className="w-4 h-4 mr-2" />
          {isEmailing ? 'Sending...' : 'Email'}
        </Button>
        <Button onClick={handleSave} variant="outline" size="sm">
          <Save className="w-4 h-4 mr-2" />
          Save
        </Button>
        <Button onClick={onNewPlan} className="bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700">
          Create New Plan
        </Button>
      </div>

      {/* Lesson Objectives */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center space-x-2">
            <Target className="w-5 h-5 text-green-600" />
            <span>Lesson Objectives</span>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <ul className="space-y-2">
            {lessonPlan.content.objectives.map((objective, index) => (
              <li key={index} className="flex items-start space-x-2">
                <span className="text-green-600 font-semibold">{index + 1}.</span>
                <span>{objective}</span>
              </li>
            ))}
          </ul>
        </CardContent>
      </Card>

      {/* Warm-up Activity */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center space-x-2">
            <BookOpen className="w-5 h-5 text-orange-600" />
            <span>Warm-up Activity</span>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <p className="text-gray-700 leading-relaxed">{lessonPlan.content.warmUp}</p>
        </CardContent>
      </Card>

      {/* Core Content */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center space-x-2">
            <BookOpen className="w-5 h-5 text-blue-600" />
            <span>Core Content</span>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <ol className="space-y-3">
            {lessonPlan.content.coreContent.map((content, index) => (
              <li key={index} className="flex items-start space-x-2">
                <span className="text-blue-600 font-semibold">{index + 1}.</span>
                <span className="text-gray-700">{content}</span>
              </li>
            ))}
          </ol>
        </CardContent>
      </Card>

      {/* Student Activities */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center space-x-2">
            <Users className="w-5 h-5 text-purple-600" />
            <span>Student Activities</span>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <ul className="space-y-3">
            {lessonPlan.content.studentActivities.map((activity, index) => (
              <li key={index} className="flex items-start space-x-2">
                <span className="text-purple-600 font-semibold">{index + 1}.</span>
                <span className="text-gray-700">{activity}</span>
              </li>
            ))}
          </ul>
        </CardContent>
      </Card>

      {/* Assessment Questions */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center space-x-2">
            <HelpCircle className="w-5 h-5 text-red-600" />
            <span>Assessment Questions</span>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <ol className="space-y-3">
            {lessonPlan.content.assessmentQuestions.map((question, index) => (
              <li key={index} className="flex items-start space-x-2">
                <span className="text-red-600 font-semibold">{index + 1}.</span>
                <span className="text-gray-700">{question}</span>
              </li>
            ))}
          </ol>
        </CardContent>
      </Card>

      {/* Homework Tasks */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center space-x-2">
            <Home className="w-5 h-5 text-indigo-600" />
            <span>Homework Tasks</span>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <ul className="space-y-3">
            {lessonPlan.content.homeworkTasks.map((task, index) => (
              <li key={index} className="flex items-start space-x-2">
                <span className="text-indigo-600 font-semibold">{index + 1}.</span>
                <span className="text-gray-700">{task}</span>
              </li>
            ))}
          </ul>
        </CardContent>
      </Card>

      <Separator />
      
      <div className="text-center text-sm text-gray-500">
        Generated by LessonCraft AI on {new Date(lessonPlan.createdAt).toLocaleDateString()}
      </div>
    </div>
  );
}